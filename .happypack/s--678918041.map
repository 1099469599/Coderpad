{"version":3,"sources":["/Users/Kylewh/Desktop/playground/projects/coderPad/src/containers/Editor/index.js"],"names":["editorActions","Editor","props","loadLocal","localStorage","getItem","fillTextFromLocal","textarea","value","textValue","onChange","result","setItem","editMarkdown","mockSave","e","ctrlKey","metaKey","keyCode","preventDefault","toggleSaveFile","componentWillMount","_initHighLight","loadLocalFiles","componentDidMount","hlScript","document","createElement","type","src","getElementsByTagName","appendChild","onload","window","hljs","initHighlightingOnLoad","console","log","render","isPreview","isSaving","savedFiles","isBrowsing","togglePreview","toggleBrowse","saveNewFile","markdownCls","markdown","previewCls","browseCls","node","__html","toJS","propTypes","string","func","bool","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  makeSelectTextValue,\n  makeSelectIsPreview,\n  makeSelectIsSaving,\n  makeSelectIsBrowsing,\n  makeSelectSavedFiles\n} from \"./selector\";\nimport * as editorActions from \"./action\";\nimport debounce from \"lodash/debounce\";\nimport marked from \"marked\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Wrapper from \"./Wrapper\";\nimport AutoSizeTextarea from \"./Textarea\";\nimport EditorPanel from \"./EditorPanel\";\nimport Preview from \"material-ui/svg-icons/action/visibility\";\nimport Save from \"material-ui/svg-icons/content/archive\";\nimport SaveFileModal from \"./SaveFileModal\";\nimport BrowseFileModal from \"./browseFileModal\";\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = debounce(this.onChange, 500);\n  }\n\n  componentWillMount() {\n    this._initHighLight();\n    this.props.loadLocalFiles();\n  }\n\n  componentDidMount() {\n    this.fillTextFromLocal();\n    // Forced synchronization between state&LocalStorage\n    this.props.editMarkdown(this.textarea.value);\n  }\n\n  _initHighLight() {\n    const hlScript = document.createElement(\"script\");\n    hlScript.type = \"text/javascript\";\n    hlScript.src =\n      \"//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.7/highlight.min.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(hlScript);\n    hlScript.onload = function() {\n      window.hljs.initHighlightingOnLoad();\n      console.log(\n        \"%c HilghtJS initiaized\",\n        \"color: #8bc34a; font-weight: bold;\"\n      );\n    };\n  }\n\n  loadLocal = () => {\n    return localStorage.getItem(\"currentText\");\n  };\n\n  fillTextFromLocal = () => {\n    this.textarea.value = this.loadLocal()\n      ? this.loadLocal()\n      : this.props.textValue;\n  };\n\n  onChange = () => {\n    const result = this.textarea.value;\n    localStorage.setItem(\"currentText\", result);\n    this.props.editMarkdown(result);\n  };\n\n  mockSave = e => {\n    if ((e.ctrlKey || e.metaKey) && e.keyCode === 83) {\n      e.preventDefault();\n      this.props.toggleSaveFile();\n    }\n  };\n\n  render() {\n    const {\n      isPreview,\n      isSaving,\n      savedFiles,\n      textValue,\n      isBrowsing,\n      editMarkdown,\n      toggleSaveFile,\n      loadLocalFiles,\n      togglePreview,\n      toggleBrowse,\n      saveNewFile\n    } = this.props;\n\n    const markdownCls = classNames({\n      \"hidden-toggle\": isPreview || isBrowsing,\n      markdown: true\n    });\n\n    const previewCls = classNames({\n      \"hidden-toggle\": !isPreview,\n      markdown: true\n    });\n\n    const browseCls = classNames({\n      \"hidden-toggle\": !isBrowsing\n    });\n    return (\n      <Wrapper>\n        {/* Markdown -Editor */}\n        <AutoSizeTextarea\n          className={markdownCls}\n          inputRef={node => (this.textarea = node)}\n          onChange={this.onChange}\n          onKeyDown={this.mockSave}\n        />\n        {/* Preview -Overlay*/}\n        <div\n          className={previewCls}\n          dangerouslySetInnerHTML={{\n            __html: marked(textValue)\n          }}\n        />\n        <div />\n        {/* Editor tools panel - Aside */}\n        <EditorPanel\n          togglePreview={togglePreview}\n          toggleSaveFile={toggleSaveFile}\n          toggleBrowse={toggleBrowse}\n          isBrowsing={isBrowsing}\n          isPreview={isPreview}\n          isSaving={isSaving}\n        />\n        {/* Modal: enter filename */}\n        <SaveFileModal\n          isSaving={isSaving}\n          onSave={saveNewFile}\n          onCancel={toggleSaveFile}\n          textValue={textValue}\n        />\n        <BrowseFileModal\n          isBrowsing={isBrowsing}\n          toggleBrowse={toggleBrowse}\n          savedFiles={savedFiles.toJS()}\n          openFile\n        />\n      </Wrapper>\n    );\n  }\n}\n\nEditor.propTypes = {\n  textValue: PropTypes.string,\n  togglePreview: PropTypes.func,\n  isPreview: PropTypes.bool,\n  isSaving: PropTypes.bool,\n  isBrowsing: PropTypes.bool,\n  editMarkdown: PropTypes.func,\n  toggleSaveFile: PropTypes.func,\n  loadLocalFiles: PropTypes.func,\n  toggleBrowse: PropTypes.func,\n  saveNewFile: PropTypes.func,\n  savedFiles: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  textValue: makeSelectTextValue(state),\n  isPreview: makeSelectIsPreview(state),\n  isSaving: makeSelectIsSaving(state),\n  isBrowsing: makeSelectIsBrowsing(state),\n  savedFiles: makeSelectSavedFiles(state)\n});\n\nexport default connect(mapStateToProps, editorActions)(Editor);\n"]}