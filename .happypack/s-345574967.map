{"version":3,"sources":["/Users/Kylewh/Desktop/playground/projects/coderPad/src/containers/Editor/reducer.js"],"names":["actionTypes","initialText","initialState","fromJS","textValue","isPreview","isSaving","isBrowsing","savedFiles","editor","state","action","type","TOGGLE_PREVIEW","update","EDIT_MARKDOWN","set","payload","TOGGLE_SAVEFILE","SAVE_NEWFILE","setIn","id","name"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;IAAYA,W;;AACZ;;;;;;;;AAEA,IAAMC,2KAAN;;AAKA,IAAMC,eAAe,oBAAUC,MAAV,CAAiB;AACpCC,aAAWH,WADyB;AAEpCI,aAAW,KAFyB;AAGpCC,YAAU,KAH0B;AAIpCC,cAAY,KAJwB;AAKpCC,cAAY;AALwB,CAAjB,CAArB;;AAQA,IAAMC,SAAS,SAATA,MAAS,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AAC/C,UAAQA,OAAOC,IAAf;AACE,SAAKZ,YAAYa,cAAjB;AACE,aAAOH,MAAMI,MAAN,CAAa,WAAb,EAA0B;AAAA,eAAa,CAACT,SAAd;AAAA,OAA1B,CAAP;AACF,SAAKL,YAAYe,aAAjB;AACE,aAAOL,MAAMM,GAAN,CAAU,WAAV,EAAuBL,OAAOM,OAA9B,CAAP;AACF,SAAKjB,YAAYkB,eAAjB;AACE,aAAOR,MAAMI,MAAN,CAAa,UAAb,EAAyB;AAAA,eAAY,CAACR,QAAb;AAAA,OAAzB,CAAP;AACF,SAAKN,YAAYmB,YAAjB;AACE,aAAOT,MAAMU,KAAN,CAAY,CAAC,WAAD,EAAcT,OAAOU,EAArB,CAAZ,EAAsC;AAC3CC,cAAMX,OAAOW,IAD8B;AAE3ClB,mBAAWO,OAAOP;AAFyB,OAAtC,CAAP;AAIF;AACE,aAAOM,KAAP;AAbJ;AAeD,CAhBD;;kBAkBeD,M","sourcesContent":["import { createSelector } from \"reselect\";\nimport Immutable from \"immutable\";\nimport { combineReducers } from \"redux-immutable\";\nimport * as actionTypes from \"../App/constant\";\nimport ambientSound from \"../Embient/reducer\";\n\nconst initialText = `## Welcome\n  Hi, I am distraction-free text editor :)\nYou can write plain text or using markdown syntax, we will automatically save the text for you.\n  `;\n\nconst initialState = Immutable.fromJS({\n  textValue: initialText,\n  isPreview: false,\n  isSaving: false,\n  isBrowsing: false,\n  savedFiles: {}\n});\n\nconst editor = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TOGGLE_PREVIEW:\n      return state.update(\"isPreview\", isPreview => !isPreview);\n    case actionTypes.EDIT_MARKDOWN:\n      return state.set(\"textValue\", action.payload);\n    case actionTypes.TOGGLE_SAVEFILE:\n      return state.update(\"isSaving\", isSaving => !isSaving);\n    case actionTypes.SAVE_NEWFILE:\n      return state.setIn([\"savedFile\", action.id], {\n        name: action.name,\n        textValue: action.textValue\n      });\n    default:\n      return state;\n  }\n};\n\nexport default editor;\n"]}