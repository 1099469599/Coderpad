{"version":3,"sources":["/Users/Kylewh/Desktop/playground/projects/coderPad/src/containers/Editor/index.js"],"names":["editorActions","Editor","props","_loadLocal","localStorage","getItem","prefix","mockSubmit","e","keyCode","saveNewFile","_onChange","result","textarea","value","setItem","editMarkdown","componentWillMount","_initHighLight","componentDidMount","textValue","hlScript","document","createElement","type","src","getElementsByTagName","appendChild","onload","window","hljs","initHighlightingOnLoad","console","log","render","isPreview","isSaving","toggleSaveFile","togglePreview","markdownCls","markdown","previewCls","previewIconCls","active","saveIconCls","node","__html","mockSumbit","propTypes","string","func","bool","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  makeSelectTextValue,\n  makeSelectIsPreview,\n  makeSelectIsSaving\n} from \"./selector\";\nimport * as editorActions from \"./action\";\nimport debounce from \"lodash/debounce\";\nimport marked from \"marked\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Wrapper from \"./Wrapper\";\nimport AutoSizeTextarea from \"./Textarea\";\nimport EditorPanel from \"./EditorPanel\";\nimport Preview from \"material-ui/svg-icons/action/visibility\";\nimport Save from \"material-ui/svg-icons/content/archive\";\nimport SaveFileModal from \"./SaveFileModal\";\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.prefix = \"coderPad\";\n    this._onChange = debounce(this._onChange, 500);\n  }\n\n  componentWillMount() {\n    this._initHighLight();\n  }\n\n  componentDidMount() {\n    this.textarea.value = this._loadLocal()\n      ? this._loadLocal()\n      : this.props.textValue;\n    // Forced synchronization between state&LocalStorage\n    this.props.editMarkdown(this.textarea.value);\n  }\n\n  _initHighLight() {\n    const hlScript = document.createElement(\"script\");\n    hlScript.type = \"text/javascript\";\n    hlScript.src =\n      \"//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.7/highlight.min.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(hlScript);\n    hlScript.onload = function() {\n      window.hljs.initHighlightingOnLoad();\n      console.log(\n        \"%c HilghtJS initiaized\",\n        \"color: #8bc34a; font-weight: bold;\"\n      );\n    };\n  }\n\n  _loadLocal = () => {\n    return localStorage.getItem(this.prefix);\n  };\n\n  mockSubmit = e => {\n    if (e.keyCode === 13) {\n      this.props.saveNewFile();\n    }\n  };\n  \n  _onChange = () => {\n    const result = this.textarea.value;\n    localStorage.setItem(this.prefix, result);\n    this.props.editMarkdown(result);\n  };\n\n  render() {\n    const {\n      isPreview,\n      isSaving,\n      textValue,\n      editMarkdown,\n      toggleSaveFile,\n      togglePreview,\n      saveNewFile\n    } = this.props;\n\n    const markdownCls = classNames({\n      \"preview-toggle\": isPreview,\n      markdown: true\n    });\n\n    const previewCls = classNames({\n      \"preview-toggle\": !isPreview,\n      markdown: true\n    });\n\n    const previewIconCls = classNames({ active: isPreview });\n    const saveIconCls = classNames({ active: isSaving });\n\n    return (\n      <Wrapper>\n        {/* Markdown */}\n        <AutoSizeTextarea\n          className={markdownCls}\n          inputRef={node => (this.textarea = node)}\n          onChange={this._onChange}\n        />\n        {/* Preview */}\n        <div\n          className={previewCls}\n          dangerouslySetInnerHTML={{\n            __html: marked(textValue)\n          }}\n        />\n        {/* Editor tools panel */}\n        <EditorPanel>\n          <Preview className={previewIconCls} onClick={togglePreview} />\n          <Save className={saveIconCls} onClick={toggleSaveFile} />\n        </EditorPanel>\n        {/* Modal: enter filename */}\n        <SaveFileModal\n          isSaving={isSaving}\n          onSave={saveNewFile}\n          onCancel={toggleSaveFile}\n          textValue={textValue}\n          mockSumbit={this.mockSumbit}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nEditor.propTypes = {\n  textValue: PropTypes.string,\n  togglePreview: PropTypes.func,\n  isPreview: PropTypes.bool,\n  isSaving: PropTypes.bool,\n  editMarkdown: PropTypes.func,\n  toggleSaveFile: PropTypes.func,\n  saveNewFile: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  textValue: makeSelectTextValue(state),\n  isPreview: makeSelectIsPreview(state),\n  isSaving: makeSelectIsSaving(state)\n});\n\nexport default connect(mapStateToProps, editorActions)(Editor);\n"]}