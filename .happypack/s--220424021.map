{"version":3,"sources":["/Users/Kylewh/Desktop/playground/projects/coderPad/src/containers/Editor/BrowseFile.js"],"names":["BrowseFile","props","syncLocal","key","localStorage","indexOf","item","getItem","localSavedFiles","JSON","parse","loadLocalFiles","componentDidMount","render","isBrowsing","browseCls","propTypes","bool","func","mapStateToProps","state"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;IAEMA,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAMA,KAAN,CADiB;;AAAA,UASnBC,SATmB,GASP,YAAM;AAChB,WAAK,IAAIC,GAAT,IAAgBC,YAAhB,EAA8B;AAC5B,YAAID,IAAIE,OAAJ,CAAY,UAAZ,IAA0B,CAAC,CAA/B,EAAkC;AAChC,cAAIC,OAAOF,aAAaG,OAAb,CAAqBJ,GAArB,CAAX;AACA,gBAAKK,eAAL,CAAqBL,GAArB,IAA4BM,KAAKC,KAAL,CAAWJ,IAAX,CAA5B;AACD;AACF;AACD,YAAKL,KAAL,CAAWU,cAAX,CAA0B,MAAKH,eAA/B;AACD,KAjBkB;;AAEjB,UAAKA,eAAL,GAAuB,EAAvB;AAFiB;AAGlB;;uBAEDI,iB,gCAAoB;AAClB,SAAKV,SAAL;AACD,G;;uBAYDW,M,qBAAS;AAAA,QACCC,UADD,GACgB,KAAKb,KADrB,CACCa,UADD;;AAEP,QAAMC,YAAY,0BAAW;AAC3B,uBAAiB,CAACD;AADS,KAAX,CAAlB;AAGA,WAAO,uCAAK,WAAWC,SAAhB,GAAP;AAED,G;;;;;AAGHf,WAAWgB,SAAX,GAAuB;AACrBF,cAAY,oBAAUG,IADD;AAErBN,kBAAgB,oBAAUO;AAFL,CAAvB;AAIA,IAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,SAAU;AAChCL,gBAAY,oCAAqBM,KAArB;AADoB,GAAV;AAAA,CAAxB;;kBAIe,yBAAQD,eAAR,EAAyB,EAAER,sCAAF,EAAzB,EAA6CX,UAA7C,C","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { makeSelectIsBrowsing } from \"./selector\";\nimport { loadLocalFiles } from \"./action\";\n\nclass BrowseFile extends Component {\n  constructor(props) {\n    super(props);\n    this.localSavedFiles = {};\n  }\n\n  componentDidMount() {\n    this.syncLocal();\n  }\n\n  syncLocal = () => {\n    for (let key in localStorage) {\n      if (key.indexOf(\"coderPad\") > -1) {\n        let item = localStorage.getItem(key);\n        this.localSavedFiles[key] = JSON.parse(item);\n      }\n    }\n    this.props.loadLocalFiles(this.localSavedFiles);\n  };\n\n  render() {\n    const { isBrowsing } = this.props;\n    const browseCls = classNames({\n      \"hidden-toggle\": !isBrowsing\n    });\n    return <div className={browseCls}>\n    </div>\n  }\n}\n\nBrowseFile.propTypes = {\n  isBrowsing: PropTypes.bool,\n  loadLocalFiles: PropTypes.func\n};\nconst mapStateToProps = state => ({\n  isBrowsing: makeSelectIsBrowsing(state)\n});\n\nexport default connect(mapStateToProps, { loadLocalFiles })(BrowseFile);\n"]}