{"version":3,"sources":["/Users/Kylewh/Desktop/playground/projects/coderPad/src/containers/Editor/reducer.js"],"names":["actionTypes","initialText","initialState","fromJS","textValue","isPreview","isSaving","isBrowsing","savedFiles","editor","state","action","type","TOGGLE_PREVIEW","update","TOGGLE_SAVEFILE","TOGGLE_BROWSE","EDIT_MARKDOWN","set","payload","SAVE_NEWFILE","console","log","setIn","name","LOAD_LOCALFILES"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;AACA;;IAAYA,W;;AACZ;;;;;;;;AAEA,IAAMC,6LAAN;;AASA,IAAMC,eAAe,oBAAUC,MAAV,CAAiB;AACpCC,aAAWH,WADyB;AAEpCI,aAAW,KAFyB;AAGpCC,YAAU,KAH0B;AAIpCC,cAAY,KAJwB;AAKpCC,cAAY;AALwB,CAAjB,CAArB;;AAQA,IAAMC,SAAS,SAATA,MAAS,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AAC/C,UAAQA,OAAOC,IAAf;AACE,SAAKZ,YAAYa,cAAjB;AACE,aAAOH,MAAMI,MAAN,CAAa,WAAb,EAA0B;AAAA,eAAa,CAACT,SAAd;AAAA,OAA1B,CAAP;AACF,SAAKL,YAAYe,eAAjB;AACE,aAAOL,MAAMI,MAAN,CAAa,UAAb,EAAyB;AAAA,eAAY,CAACR,QAAb;AAAA,OAAzB,CAAP;AACF,SAAKN,YAAYgB,aAAjB;AACE,aAAON,MAAMI,MAAN,CAAa,YAAb,EAA2B;AAAA,eAAc,CAACP,UAAf;AAAA,OAA3B,CAAP;AACF,SAAKP,YAAYiB,aAAjB;AACE,aAAOP,MAAMQ,GAAN,CAAU,WAAV,EAAuBP,OAAOQ,OAA9B,CAAP;AACF,SAAKnB,YAAYoB,YAAjB;AACEC,cAAQC,GAAR,CAAYX,OAAOP,SAAnB;AACA,aAAOM,MAAMa,KAAN,CAAY,CAAC,YAAD,EAAeZ,OAAOa,IAAtB,CAAZ,EAAyC;AAC9CpB,mBAAWO,OAAOP;AAD4B,OAAzC,CAAP;AAGF,SAAKJ,YAAYyB,eAAjB;AACE;AACA,aAAOf,MAAMQ,GAAN,CAAU,YAAV,EAAwB,oBAAUf,MAAV,CAAiBQ,OAAOQ,OAAxB,CAAxB,CAAP;AACF;AACE,aAAOT,KAAP;AAlBJ;AAoBD,CArBD;;kBAuBeD,M","sourcesContent":["import { createSelector } from \"reselect\";\nimport Immutable from \"immutable\";\nimport { combineReducers } from \"redux-immutable\";\nimport * as actionTypes from \"../App/constant\";\nimport ambientSound from \"../Embient/reducer\";\n\nconst initialText = `## Welcome    \n\nHi, I am distraction-free text editor :)    \n\nFeatures:    \n- Support markdown syntax\n- Automatically save current text for you\n- Save / Download file`;\n\nconst initialState = Immutable.fromJS({\n  textValue: initialText,\n  isPreview: false,\n  isSaving: false,\n  isBrowsing: false,\n  savedFiles: {}\n});\n\nconst editor = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.TOGGLE_PREVIEW:\n      return state.update(\"isPreview\", isPreview => !isPreview);\n    case actionTypes.TOGGLE_SAVEFILE:\n      return state.update(\"isSaving\", isSaving => !isSaving);\n    case actionTypes.TOGGLE_BROWSE:\n      return state.update(\"isBrowsing\", isBrowsing => !isBrowsing);\n    case actionTypes.EDIT_MARKDOWN:\n      return state.set(\"textValue\", action.payload);\n    case actionTypes.SAVE_NEWFILE:\n      console.log(action.textValue);\n      return state.setIn([\"savedFiles\", action.name], {\n        textValue: action.textValue\n      });\n    case actionTypes.LOAD_LOCALFILES:\n      // pitfall alert: ensure that your value is immutable type\n      return state.set(\"savedFiles\", Immutable.fromJS(action.payload));\n    default:\n      return state;\n  }\n};\n\nexport default editor;\n"]}